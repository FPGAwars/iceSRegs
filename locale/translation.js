// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Left');
gettext('Left-Right');
gettext('Right');
gettext('SL');
gettext('Sys');
gettext('SLR');
gettext('Sys');
gettext('02-bits');
gettext('SLR-ld-rst');
gettext('SLR-ld-rst-02-verilog: Shift register to the left or right, with load and reset inputs.  Verilog implementation');
gettext('SLR-ld');
gettext('SLR-ld-02-verilog: Shift register to the left or right, with load input.  Verilog implementation');
gettext('SLR-rst');
gettext('SLR-rst-02-verilog: Shift register to the left or right, with reset input.  Verilog implementation');
gettext('SLR');
gettext('SLR-02-verilog: Shift register to the left or right.  Verilog implementation');
gettext('02-bits');
gettext('Sys-SLR-ld-rst');
gettext('Sys-SLR-ld-rst-02-verilog: System Shift register to the left or right, with load and reset inputs.  Verilog implementation');
gettext('Sys-SLR-ld');
gettext('Sys-SLR-ld-02-verilog: System Shift register to the left or right, with load input.  Verilog implementation');
gettext('Sys-SLR-rst');
gettext('Sys-SLR-rst-02-verilog: System Shift register to the left or right, with reset input.  Verilog implementation');
gettext('Sys-SLR');
gettext('Sys-SLR-02-verilog: System Shift register to the left or right.  Verilog implementation');
gettext('02-bits');
gettext('SL02-ld-rst');
gettext('SL-ld-rst-02-verilog: Shift register to the left, with load.  Verilog implementation');
gettext('SL02-ld');
gettext('SL-ld-02-verilog: Shift register to the left, with load.  Verilog implementation');
gettext('SL02-rst');
gettext('SL-rst-02-verilog: 2-bits Shift register to the left, with reset.  Verilog implementation');
gettext('SL02');
gettext('SL-02-verilog: 2-bits Shift register to the left.  Verilog implementation');
gettext('SL02-ld-rst');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('Sys-SL-ld-rst');
gettext('Sys-SL2-ld-rst-verilog: 2-bits System Shift register to the left, with load. Verilog implementation');
gettext('Load external data');
gettext('External data');
gettext('Serial input');
gettext('Sys-SL-ld');
gettext('Sys-SR2-ld-verilog: 2-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SL-rst');
gettext('Sys-SL-rst-02-verilog: 2-bits System Shift register to the left, with reset.  Verilog implementation');
gettext('Sys-SL');
gettext('Sys-SL-02-verilog: 2-bits System Shift register to the left.  Verilog implementation');
gettext('Sys-SL-ld');
gettext('Sys-SR3-ld-verilog: 2-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SL-rst');
gettext('Sys-SL-rst-03-verilog: 3-bits System Shift register to the left, with reset.  Verilog implementation');
gettext('Sys-SL');
gettext('Sys-SL-03-verilog: 3-bits System Shift register to the left.  Verilog implementation');
gettext('Sys-SL-ld');
gettext('Sys-SL');
gettext('Sys-SL-04-verilog: 4-bits System Shift register to the left.  Verilog implementation');
gettext('SR');
gettext('Sys');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('16-bits');
gettext('32-bits');
gettext('Blocks');
gettext('SR02-ld-rst');
gettext('SR-ld-rst-02-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR02-ld');
gettext('SR-ld-02-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR02-rst');
gettext('SR-rst-02-verilog: 2-bits Shift register to the right, with reset.  Verilog implementation');
gettext('SR02');
gettext('SR-02-verilog: 2-bits Shift register to the right.  Verilog implementation');
gettext('SR02-imp1');
gettext('SR-02-imp1: 2-bits Shift register to the right.  Block implementation 1');
gettext('SR1-2bits-verilog: Shift  a 2-bit value one bit right. MSB is filled with in. Verilog implementation');
gettext('Reg-2-verilog: 2 bits Register with load input. Verilog implementation');
gettext('Combinational  \nShift-right');
gettext('SR02-imp2');
gettext('SR-02-imp2: 2-bits Shift register to the right.  Block implementation 2');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('DFF. D Flip-flop. Verilog implementation');
gettext('SR02-ld-imp1');
gettext('SR-ld-02-imp1: Shift register to the right, with load.  Block implementation 1');
gettext('2-to-1 Multplexer (2-bit channels). Verilog implementation');
gettext('OR2: Two bits input OR gate');
gettext('SR02-ld-imp2');
gettext('SR-ld-02-imp2: Shift register to the right, with load.  Block implementation 2');
gettext('2-to-1 Multplexer (1-bit channels). Verilog implementation');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('SR02-ld-rst-imp1');
gettext('SR-ld-rst-02-imp1: Shift register to the right, with load and reset.  Block implementation 1');
gettext('Reg-rst-02-verilog: 2-bits Register with load and reset inputs. Verilog implementation');
gettext('SR02-ld-rst-imp2');
gettext('SR-ld-rst-02-imp2: Shift register to the right, with load.  Block implementation 2');
gettext('D Flip-Flop with load and reset. Implemented in verilog');
gettext('SR02-rst-imp1');
gettext('SR-rst-02-imp1: 2-bits Shift register to the right, with the reset.  Block implementation 1');
gettext('SR02-rst-imp2');
gettext('SR-02-rst-imp2: 2-bits Shift register to the right, with reset.  Block implementation 2');
gettext('SR03-ld-rst');
gettext('SR-ld-rst-03-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR03-ld');
gettext('SR-ld-03-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR03-rst');
gettext('SR-rst-03-verilog: 3-bits Shift register to the right, with reset.  Verilog implementation');
gettext('SR03');
gettext('SR-03-verilog: 3-bits Shift register to the right.  Verilog implementation');
gettext('Blocks');
gettext('SR04-ld-rst');
gettext('SR-ld-rst-04-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR04-ld');
gettext('SR-ld-04-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR04-rst');
gettext('SR-rst-04-verilog: 4-bits Shift register to the right, with reset.  Verilog implementation');
gettext('SR04');
gettext('SR-04-verilog: 4-bits Shift register to the right.  Verilog implementation');
gettext('SR04-imp1');
gettext('SR-04-imp1: 4-bits Shift register to the right.  Block implementation 1');
gettext('Reg-4-verilog: 4 bits Register with load input. Verilog implementation');
gettext('SR1-4bits-verilog: Shift  a 4-bit value one bit right. MSB is filled with in. Verilog implementation');
gettext('SR04-imp2');
gettext('SR-04-imp2: 4-bits Shift register to the right.  Block implementation 2');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('SR04-ld-imp1');
gettext('SR-ld-04-imp1: Shift register to the right, with load.  Block implementation 1');
gettext('2-to-1 Multplexer (4-bit channels). Verilog implementation');
gettext('SR04-ld-imp2');
gettext('SR-ld-04-imp2: Shift register to the right, with load.  Block implementation 2');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('SR04-ld-rst-imp1');
gettext('SR-ld-rst-04-imp1: Shift register to the right, with load and reset.  Block implementation 1');
gettext('Reg-rst-4-verilog: 4-bits Register with load and reset inputs. Verilog implementation');
gettext('SR04-ld-rst-imp2');
gettext('SR-ld-rst-04-imp2: Shift register to the right, with load.  Block implementation 2');
gettext('SR04-rst-imp1');
gettext('SR-rst-04-imp1: 2-bits Shift register to the right, with reset.  Block implementation 1');
gettext('SR04-rst-imp2');
gettext('SR-04-rst-imp2: 4-bits Shift register to the right, with reset.  Block implementation 2');
gettext('SR04-ld-imp1');
gettext('SR05-ld-rst');
gettext('SR-ld-rst-05-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR05-ld');
gettext('SR-ld-05-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR05-rst');
gettext('SR-rst-05-verilog: 5-bits Shift register to the right, with reset.  Verilog implementation');
gettext('SR05');
gettext('SR-05-verilog: 5-bits Shift register to the right.  Verilog implementation');
gettext('SR06-ld-rst');
gettext('SR-ld-rst-06-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR06-ld');
gettext('SR-ld-06-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR06-rst');
gettext('SR-rst-06-verilog: 6-bits Shift register to the right, with reset.  Verilog implementation');
gettext('SR06');
gettext('SR-06-verilog: 6-bits Shift register to the right.  Verilog implementation');
gettext('SR07-ld-rst');
gettext('SR-ld-rst-07-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR07-ld');
gettext('SR-ld-07-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR07-rst');
gettext('SR-rst-0-verilog: 7-bits Shift register to the right, with reset.  Verilog implementation');
gettext('SR07');
gettext('SR-07-verilog: 7-bits Shift register to the right.  Verilog implementation');
gettext('Blocks');
gettext('SR08-ld-rst');
gettext('SR-ld-rst-08-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR08-ld');
gettext('SR-ld-08-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR08-rst');
gettext('SR-rst-8-verilog: 8-bits Shift register to the right, with reset.  Verilog implementation');
gettext('SR08');
gettext('SR-08-verilog: 8-bits Shift register to the right.  Verilog implementation');
gettext('SR08-imp1');
gettext('SR-08-imp1: 8-bits Shift register to the right.  Block implementation 1');
gettext('Reg-8-verilog: 8 bits Register with load input. Verilog implementation');
gettext('SR1-8bits-verilog: Shift  a 8-bit value one bit right. MSB is filled with in. Verilog implementation');
gettext('SR08-ld-imp1');
gettext('SR-ld-08-imp1: Shift register to the right, with load.  Block implementation 1');
gettext('2-to-1 Multplexer (8-bit channels). Verilog implementation');
gettext('SR08-ld-rst-imp1');
gettext('SR-ld-rst-08-imp1: Shift register to the right, with load and reset.  Block implementation 1');
gettext('Reg-rst-8-verilog: 8-bits Register with load and reset inputs. Verilog implementation');
gettext('SR08-rst-imp1');
gettext('SR-rst-08-imp1: 8-bits Shift register to the right, with reset.  Block implementation 1');
gettext('SR09-ld-rst');
gettext('SR-ld-rst-09-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR09-ld');
gettext('SR-ld-09-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR09-rst');
gettext('SR-rst-9-verilog: Shift register to the right, with reset.  Verilog implementation');
gettext('SR09');
gettext('SR-09-verilog: 9-bits Shift register to the right.  Verilog implementation');
gettext('SR10-ld-rst');
gettext('SR-ld-rst-10-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR10-ld');
gettext('SR-ld-10-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR10-rst');
gettext('SR-rst-10-verilog: Shift register to the right, with reset.  Verilog implementation');
gettext('SR10');
gettext('SR-10-verilog: 10-bits Shift register to the right.  Verilog implementation');
gettext('SR10-ld');
gettext('SR11-ld-rst');
gettext('SR-ld-rst-11-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR11-ld');
gettext('SR-ld-11-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR11-rst');
gettext('SR-rst-11-verilog: Shift register to the right, with reset.  Verilog implementation');
gettext('SR11');
gettext('SR-11-verilog: 11-bits Shift register to the right.  Verilog implementation');
gettext('SR12-ld-rst');
gettext('SR-ld-rst-12-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR12-ld');
gettext('SR-ld-12-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR12-rst');
gettext('SR-rst-12-verilog: Shift register to the right, with reset.  Verilog implementation');
gettext('SR12');
gettext('SR-12-verilog: 12-bits Shift register to the right.  Verilog implementation');
gettext('Blocks');
gettext('SR16-ld-rst');
gettext('SR-ld-rst-16-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR16-ld');
gettext('SR-ld-16-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR16-rst');
gettext('SR-rst-16-verilog: Shift register to the right, with reset.  Verilog implementation');
gettext('SR16');
gettext('SR-16-verilog: 16-bits Shift register to the right.  Verilog implementation');
gettext('SR16-imp1');
gettext('SR-16-imp1: 16-bits Shift register to the right.  Block implementation 1');
gettext('Reg-16-verilog: 16 bits Register with load input. Verilog implementation');
gettext('SR1-16bits-verilog: Shift  a 16-bit value one bit right. MSB is filled with in. Verilog implementation');
gettext('SR16-ld-imp1');
gettext('SR-ld-16-imp1: Shift register to the right, with load.  Block implementation 1');
gettext('2-to-1 Multplexer (16-bit channels). Verilog implementation');
gettext('SR16-ld-rst-imp1');
gettext('SR-ld-rst-16-imp1: Shift register to the right, with load and reset.  Block implementation 1');
gettext('Reg-rst-16-verilog: 16-bits Register with load and reset inputs. Verilog implementation');
gettext('SR16-rst-imp1');
gettext('SR-rst-16-imp1: Shift register to the right, with reset.  Block implementation 1');
gettext('SR16-ld-rst');
gettext('Blocks');
gettext('SR32-ld-rst');
gettext('SR-ld-rst-32-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR32-ld');
gettext('SR-ld-32-verilog: Shift register to the right, with load.  Verilog implementation');
gettext('SR32-rst');
gettext('SR-rst-32-verilog: Shift register to the right, with reset.  Verilog implementation');
gettext('SR32');
gettext('SR-32-verilog: 32-bits Shift register to the right.  Verilog implementation');
gettext('SR32-imp1');
gettext('SR-32-imp1: 32-bits Shift register to the right.  Block implementation 1');
gettext('Reg-03-verilog: 32 bits Register with load input. Verilog implementation');
gettext('SR1-32bits-verilog: Shift  a 32-bit value one bit right. MSB is filled with in. Verilog implementation');
gettext('SR32-ld-imp1');
gettext('SR-ld-32-imp1: Shift register to the right, with load.  Block implementation 1');
gettext('2-to-1 Multplexer (32-bit channels). Verilog implementation');
gettext('SR32-ld-rst-imp1');
gettext('SR-ld-rst-32-imp1: Shift register to the right, with load and reset.  Block implementation 1');
gettext('Reg-rst-32-verilog: 32-bits Register with load and reset inputs. Verilog implementation');
gettext('SR32-rst-imp1');
gettext('SR-rst-32-imp1: Shift register to the right, with reset.  Block implementation 1');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('16-bits');
gettext('32-bits');
gettext('Blocks');
gettext('Sys-SR-ld-rst');
gettext('Sys-SR2-ld-rst-verilog: 2-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR-ld');
gettext('Sys-SR-rst');
gettext('Sys-SR-rst-02-verilog: 2-bits System Shift register to the right, with reset.  Verilog implementation');
gettext('Sys-SR');
gettext('Sys-SR-02-verilog: 2-bits System Shift register to the right.  Verilog implementation');
gettext('Sys-SR-imp1');
gettext('Sys-SR-02-blocks-imp1: 2-bits System Shift register to the right. Block implementation 1');
gettext('Sys-reg-02: Two bits system register');
gettext('Sys-SR-imp2');
gettext('Sys-SR-02-blocks-imp2: 2-bits System Shift register to the right. Block implementation 2');
gettext('System - D Flip-flop. Capture data every system clock cycle. Verilog implementation');
gettext('Parameter: Initial value');
gettext('System clock');
gettext('Input data');
gettext('Output');
gettext('# D Flip-Flop  (system)\n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Not connected');
gettext('Sys-SR-ld-imp1');
gettext('Sys-SR2-ld-imp1: 2-bits System Shift register to the right, with load. Block implementation 1');
gettext('Sys-reg-rst');
gettext('Data to load from the  \noutside');
gettext('Shifted internal data');
gettext('Mux-2-1');
gettext('Selects which data to load  \ninto the register:  \n* load=0: Shifted data\n* load=1: External data');
gettext('Sys-SR-ld-imp2');
gettext('Sys-SR2-ld-imp2: 2-bits System Shift register to the right, with load');
gettext('Sys-DFF-ld-verilog. System - D Flip-flop. Capture data every system clock cycle. from input si. If load is active, the data is captured from the d input. Verilog implementation');
gettext('Input data (serial)');
gettext('# D Flip-Flop  (system) with load\n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1  \nThe data is captured from input si. If load is active the  \ndata is captured from input d');
gettext('Input data (Paralell)');
gettext('Load control');
gettext('Sys-SR-ld-rst-imp1');
gettext('Sys-SR2-ld-rst-imp1: 2-bits System Shift register to the right, with load and reset. Block implementation 1');
gettext('Sys-reg-rst-02-verilog: Two bits system register with reset. Verilog implementation');
gettext('Sys-SR-ld-rst-imp2');
gettext('Sys-SR2-ld-rst-imp2: 2-bits System Shift register to the right, with load and reset. Block implementation 2');
gettext('Sys-DFF-ld-rst-verilog. System - D Flip-flop. Capture data every system clock cycle. from input si. If load is active, the data is captured from the d input. Reset input. Verilog implementation');
gettext('# D Flip-Flop  (system) with load and reset\n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1  \nThe data is captured from input si. If load is active the  \ndata is captured from input d  \nReset input');
gettext('Sys-SR-rst-imp1');
gettext('Sys-SR-rst-02: 2-bits System Shift register to the right, with reset.  Block iplementation 1');
gettext('Sys-SR-rst-imp2');
gettext('Sys-SR-rst-02: 2-bits System Shift register to the right, with reset.  Block iplementation 2');
gettext('Sys-DFF-rst: D Flip flop with reset input. When rst=1, the DFF is set to it initial value. Verilog implementation');
gettext('Data input');
gettext('Initial default  \nvalue: 0');
gettext('Reset input');
gettext('Sys-SR3-ld-rst');
gettext('Sys-SR3-ld-rst-verilog: 3-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR3-ld');
gettext('Sys-SR3-ld-verilog: 3-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR3-rst');
gettext('Sys-SR-rst-03-verilog: 3-bits System Shift register to the right, with reset.  Verilog implementation');
gettext('Sys-SR3');
gettext('Sys-SR-04-verilog: 3-bits System Shift register to the right.  Verilog implementation');
gettext('Blocks');
gettext('Sys-SR4-ld-rst');
gettext('Sys-SR4-ld-rst-verilog: 4-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR4-ld');
gettext('Sys-SR4-ld-verilog: 4-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR4-rst');
gettext('Sys-SR-rst-04-verilog: 4-bits System Shift register to the right, with reset.  Verilog implementation');
gettext('Sys-SR4');
gettext('Sys-SR-04-verilog: 4-bits System Shift register to the right.  Verilog implementation');
gettext('Sys-SR4-imp1');
gettext('Sys-SR-04-blocks-imp1: 4-bits System Shift register to the right. Block implementation 1');
gettext('Sys-reg-4: 4 bits system register');
gettext('Sys-SR4-imp2');
gettext('Sys-SR-04-imp2: 4-bits System Shift register to the right. Block implementation 2');
gettext('Sys-SR4-ld-imp1');
gettext('Sys-SR4-ld-imp1: 4-bits System Shift register to the right, with load. Block implementation 1');
gettext('Sys-SR4-ld-imp2');
gettext('Sys-SR4-ld-imp2: 4-bits System Shift register to the right, with load');
gettext('Sys-SR4-ld-rst-imp1');
gettext('Sys-SR4-ld-rst-imp1: 4-bits System Shift register to the right, with load and reset');
gettext('Sys-reg-rst-04-verilog: Two bits system register with reset. Verilog implementation');
gettext('Sys-SR4-ld-rst-imp2');
gettext('Sys-SR4-ld-rst-imp2: 4-bits System Shift register to the right, with load and reset');
gettext('Sys-SR4-rst-imp1');
gettext('Sys-SR-rst-04-imp2: 4-bits System Shift register to the right, with reset.  Block implementation 1');
gettext('Sys-SR4-rst-imp2');
gettext('Sys-SR-rst-04-imp1: 4-bits System Shift register to the right, with reset.  Block implementation 2');
gettext('Sys-SR5-ld-rst');
gettext('Sys-SR5-ld-rst-verilog: 5-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR5-ld');
gettext('Sys-SR5-ld-verilog: 5-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR5-rst');
gettext('Sys-SR-rst-05-verilog: 5-bits System Shift register to the right, with reset.  Verilog implementation');
gettext('Sys-SR5');
gettext('Sys-SR-05-verilog: 5-bits System Shift register to the right.  Verilog implementation');
gettext('Sys-SR5');
gettext('Sys-SR6-ld-rst');
gettext('Sys-SR6-ld-rst-verilog: 6-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR6-ld');
gettext('Sys-SR6-ld-verilog: 6-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR6-rst');
gettext('Sys-SR-rst-06-verilog: 6-bits System Shift register to the right, with reset.  Verilog implementation');
gettext('Sys-SR6');
gettext('Sys-SR-06-verilog: 6-bits System Shift register to the right.  Verilog implementation');
gettext('Sys-SR6-ld');
gettext('Sys-SR7-ld-rst');
gettext('Sys-SR7-ld-rst-verilog: 7-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR7-ld');
gettext('Sys-SR7-ld-verilog: 7-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR7-rst');
gettext('Sys-SR-rst-07-verilog: 7-bits System Shift register to the right, with reset.  Verilog implementation');
gettext('Sys-SR7');
gettext('Sys-SR-07-verilog: 7-bits System Shift register to the right.  Verilog implementation');
gettext('Blocks');
gettext('Sys-SR8-ld-rst');
gettext('Sys-SR8-ld-rst-verilog: 8-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR8-ld');
gettext('Sys-SR8-ld-verilog: 8-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR8-rst');
gettext('Sys-SR-rst-08-verilog: 8-bits System Shift register to the right, with reset.  Verilog implementation');
gettext('Sys-SR8');
gettext('Sys-SR-08-verilog: 8-bits System Shift register to the right.  Verilog implementation');
gettext('Sys-SR8-imp1');
gettext('Sys-SR-08-blocks-imp1: 8-bits System Shift register to the right. Block implementation 1');
gettext('Sys-reg-8: 8 bits system register');
gettext('Sys-SR8-imp2');
gettext('Sys-SR-08-imp2: 8-bits System Shift register to the right. Block implementation 2');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('Sys-SR8-ld-imp1');
gettext('Sys-SR8-ld-imp1: 8-bits System Shift register to the right, with load');
gettext('Sys-SR8-ld-rst-imp1');
gettext('Sys-SR8-ld-rst-imp1: 8-bits System Shift register to the right, with load and reset');
gettext('Sys-reg-rst-08-verilog: Two bits system register with reset. Verilog implementation');
gettext('Sys-SR8-rst-imp1');
gettext('Sys-SR-rst-08-imp2: 8-bits System Shift register to the right, with reset.  Block implementation 1');
gettext('Sys-SR8-ld-rst');
gettext('Sys-SR9-ld-rst');
gettext('Sys-SR9-ld-rst-verilog: 9-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR9-ld');
gettext('Sys-SR9-ld-verilog: 9-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR9-rst');
gettext('Sys-SR-rst-09-verilog: 9-bits System Shift register to the right, with reset.  Verilog implementation');
gettext('Sys-SR9');
gettext('Sys-SR-09-verilog: 9-bits System Shift register to the right.  Verilog implementation');
gettext('Sys-SR10-ld-rst');
gettext('Sys-SR10-ld-rst-verilog: 10-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR10-ld');
gettext('Sys-SR10-ld-verilog: 10-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR10-rst');
gettext('Sys-SR-rst-10-verilog: 10-bits System Shift register to the right, with reset.  Verilog implementation');
gettext('Sys-SR10');
gettext('Sys-SR-10-verilog: 10-bits System Shift register to the right.  Verilog implementation');
gettext('Sys-SR10-ld');
gettext('Sys-SR11-ld-rst');
gettext('Sys-SR11-ld-rst-verilog: 11-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR11-ld');
gettext('Sys-SR11-ld-verilog: 11-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR11-rst');
gettext('Sys-SR-rst-11-verilog: 11-bits System Shift register to the right, with reset.  Verilog implementation');
gettext('Sys-SR11');
gettext('Sys-SR-11-verilog: 11-bits System Shift register to the right.  Verilog implementation');
gettext('Sys-SR12-ld-rst');
gettext('Sys-SR12-ld-rst-verilog: 12-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR12-ld');
gettext('Sys-SR12-ld-verilog: 12-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR12-rst');
gettext('Sys-SR-rst-12-verilog: 12-bits System Shift register to the right, with reset.  Verilog implementation');
gettext('Sys-SR12');
gettext('Sys-SR-12-verilog: 12-bits System Shift register to the right.  Verilog implementation');
gettext('Blocks');
gettext('Sys-SR16-ld-rst');
gettext('Sys-SR16-ld-rst-verilog: 16-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR16-ld');
gettext('Sys-SR16-ld-verilog: 16-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR16-rst');
gettext('Sys-SR-rst-16-verilog: 16-bits System Shift register to the right, with reset.  Verilog implementation');
gettext('Sys-SR16');
gettext('Sys-SR-16-verilog: 16-bits System Shift register to the right.  Verilog implementation');
gettext('Sys-SR16-ld-imp1');
gettext('Sys-SR16-ld-imp1: 16-bits System Shift register to the right, with load. Block implementation 1');
gettext('Sys-reg-16: 16 bits system register');
gettext('Sys-SR16-ld-rst-imp1');
gettext('Sys-SR16-ld-rst-imp1: 16-bits System Shift register to the right, with load and reset');
gettext('Sys-reg-rst-16-verilog: 16 bits system register with reset. Verilog implementation');
gettext('Sys-SR16-rst-imp1');
gettext('Sys-SR-rst-16-imp2: 16-bits System Shift register to the right, with reset.  Block implementation 1');
gettext('Sys-SR16');
gettext('Sys-SR-16-blocks-imp1: 16-bits System Shift register to the right. Block implementation 1');
gettext('Blocks');
gettext('Sys-SR32-ld-rst');
gettext('Sys-SR32-ld-rst-verilog: 32-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR32-ld');
gettext('Sys-SR32-ld-verilog: 32-bits System Shift register to the right, with load. Verilog implementation');
gettext('Sys-SR32-rst');
gettext('Sys-SR-rst-32-imp2: 32-bits System Shift register to the right, with reset.  Block implementation 1');
gettext('Sys-reg-rst-32-verilog: 32 bits system register with reset. Verilog implementation');
gettext('Sys-SR32');
gettext('Sys-SR-32-verilog: 32-bits System Shift register to the right.  Verilog implementation');
gettext('Sys-SR32-ld-imp1');
gettext('Sys-SR32-ld-imp1: 32-bits System Shift register to the right, with load. Block implementation 1');
gettext('Sys-reg-32: 32 bits system register');
gettext('Sys-SR32-ld-rst');
gettext('Sys-SR32-ld-rst-imp1: 32-bits System Shift register to the right, with load and reset');
gettext('Sys-SR32-rst-imp1');
gettext('Sys-SR32');
gettext('Sys-SR-32-blocks-imp1: 32-bits System Shift register to the right. Block implementation 1');
gettext('TESTs');
gettext('00-Index');
gettext('# INDEX: IceSRegs Collection');
gettext('## Right');
gettext('SL-rst');
gettext('SR-ld');
gettext('SR-ld-rst');
gettext('SL-ld');
gettext('SL-ld-rst');
gettext('### System Registers');
gettext('### Standard Registers');
gettext('SR-rst');
gettext('## Left');
gettext('## Left-Right');
gettext('Left');
gettext('Left-Right');
gettext('Right');
gettext('SL');
gettext('SL-ld');
gettext('SL-ld-rst');
gettext('SL-rst');
gettext('Sys');
gettext('Sys-ld');
gettext('Sys-ld-rst');
gettext('Sys-rst');
gettext('SLR');
gettext('SLR-ld');
gettext('SLR-ld-rst');
gettext('SLR-rst');
gettext('Sys');
gettext('Sys-ld');
gettext('Sys-ld-rst');
gettext('Sys-rst');
gettext('02-bits');
gettext('02-bits');
gettext('02-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input');
gettext('D Flip-flop (verilog implementation)');
gettext('NOT gate (Verilog implementation)');
gettext('Two bits input And gate');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Remove the rebound on a mechanical switch');
gettext('1bit register (implemented in verilog)');
gettext('16-bits Syscounter with reset');
gettext('DFF-rst-x16: 16 D flip-flops in paralell with reset');
gettext('DFF-rst-x04: Three D flip-flops in paralell with reset');
gettext('DFF-rst-x01: D Flip flop with reset input. When rst=1, the DFF is 0');
gettext('Bus16-Split-quarter: Split the 16-bits bus into four buses of the same size');
gettext('Bus16-Join-quarter: Join the four same buses into an 16-bits Bus');
gettext('Inc1-16bit: Increment a 16-bits number by one');
gettext('AdderK-16bit: Adder of 16-bit operand and 16-bit constant');
gettext('Generic: 16-bits generic constant');
gettext('Adder-16bits: Adder of two operands of 16 bits');
gettext('Bus16-Split-half: Split the 16-bits bus into two buses of the same size');
gettext('Adder-8bits: Adder of two operands of 8 bits');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('Adder-4bits: Adder of two operands of 4 bits');
gettext('Adder-1bit: Adder of two operands of 1 bit');
gettext('AdderC-1bit: Adder of two operands of 1 bit plus the carry in');
gettext('XOR gate: two bits input xor gate');
gettext('Constant bit 0');
gettext('AdderC-4bits: Adder of two operands of 4 bits and Carry in');
gettext('AdderC-8bits: Adder of two operands of 8 bits and Carry in');
gettext('Bus16-Join-half: Join the two same halves into an 16-bits Bus');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input');
gettext('Sync 1-bit input with the system clock domain');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('1-bit generic constant (0/1)');
gettext('Constant bit 1');
gettext('UINT8-2bit-verilog:  Extend a 2-bit unsigned integer to 8-bits. Verilog implementation ');
gettext('Generic: 2-bits generic constant (0,1,2,3)');
gettext('Direct connection of a button with tic output. The button should not have any external circuit');
gettext('## SLR2-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('Change direction after  \ntwo shifts');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('Input signal');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('# D Flip-Flop  \n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Input');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('Edge detector');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Counter');
gettext('Initial value');
gettext('Reset input: Active high  \nWhen rst = 1, the DFF is reset to 0');
gettext('## Edges detector\n\nIt generates a 1-period pulse (tic) when an edge (Rising or falling) is detected on the  \ninput signal');
gettext('The output is 1 if the current value is 1 and the  \nprevious 0, or if the current value is 0 and the  \nprevious 1\n');
gettext('In any other case the output is 0');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SLR2-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('02-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SLR2-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SLR2 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('02-bits');
gettext('02-bits');
gettext('02-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Ledoscope. Capture the input signal during the first 8 cycles after circuit initialization');
gettext('3-bits Syscounter');
gettext('DFF-03: Three D flip-flops in paralell');
gettext('Bus3-Split-all: Split the 3-bits bus into three wires');
gettext('Bus3-Join-all: Joint three wires into a 3-bits Bus');
gettext('Inc1-3bit: Increment a 3-bits number by one');
gettext('AdderK-3bit: Adder of 3-bit operand and 3-bit constant');
gettext('Generic: 3-bits generic constant (0-7)');
gettext('Adder-3bits: Adder of two operands of 3 bits');
gettext('SReg-right-x8: 8 bits Shift register (to the right)');
gettext('SReg-right-x4: 4 bits Shift register (to the right)');
gettext('Reg: 1-Bit register');
gettext('2-to-1 Multplexer (1-bit channels). Fippled version');
gettext('2-to-1 Multplexer (1-bit channels)');
gettext('RS-FF-set. RS Flip-flop with priority set');
gettext('UINT8-2bits:  Extend a 2-bits unsigned integer to 8-bits ');
gettext('Bus8-Join-6-2: Join the two buses into an 8-bits Bus');
gettext('6bits constant value: 0');
gettext('Generic: 6-bits generic constant (0-63)');
gettext('Bus8-Split-6-2: Split the 8-bits bus into two buses of 6 and 2 wires');
gettext('Data Ledoscope. 8 samples of 8bits data are taken initially, at the system clock rate');
gettext('Reg-x08: 8-bits register');
gettext('Reg-x04: 4-bits register');
gettext('8-to-1 Multplexer (8-bit channels) (Verilog implementation)');
gettext('Counter-x03: 3-bits counter');
gettext('Reg-x03: 3-bits register');
gettext('OR-BUS3-verilog: OR gate with 3-bits bus input. Verilog implementation');
gettext('## Sys-SLR2-ld-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes');
gettext('LEDoscope');
gettext('LEDoscope-Data');
gettext('| Cycle | 0  | 1  | 2  | 3  | 4 | 5 | 6 |\n|-------|----|----|----|----|---|---|---|\n| Value | 11 | 01 | 00 | 01 | 11| 00| 11|\n| so    |  1 |  1 |  0 |  1 |  1|  0|  1|');
gettext('Load the shift register  \nafter 4 cycles');
gettext('Change direction after  \n2 cycles');
gettext('Reset after 5 cycles');
gettext('8-bits Shift register');
gettext('The input channel is captured  \non the register. One bit per  \nsystem clock');
gettext('RS FlipFlop initialized to 1');
gettext('while 1, the shift register  \nis capturing');
gettext('3-bits counter');
gettext('After 8 cycles the Flip-Flop is  \nreset and it stops capturing  \nbits');
gettext('As the 2-bits system counter is counting  \nall the time, the done signal is only  \ngenerated when the counter reaches the maximum  \nvalue and the Ledoscope is on (busy)');
gettext('Mux 2-1');
gettext('D Flip-flip\n(System)');
gettext('Priority for the set');
gettext('Select which sample is shown  \non the LEDs');
gettext('Sample 0');
gettext('Sample 1');
gettext('Enable the capture ');
gettext('This signal is 1 initially');
gettext('RS-flip-flop');
gettext('The Flip-flips is reset  \nat the end of cycle 3');
gettext('4-cycles with pulse');
gettext('Sample 2');
gettext('Sample 3');
gettext('Sample number currently  \ndisplayed');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SLR2-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes');
gettext('| Cycle | 0  | 1  | 2  | 3  | 4 | 5 |\n|-------|----|----|----|----|---|---|\n| Value | 11 | 01 | 00 | 01 | 11| 00|\n| so    |  1 |  1 |  0 |  1 |  1|  0|');
gettext('01-manual-testing');
gettext('02-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SLR2-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is reset at cycle 1');
gettext('| Cycle | 0  | 1  | 2  | 3  | 4 | 5 |\n|-------|----|----|----|----|---|---|\n| Value | 01 | 00 | 00 | 01 | 11| 01|\n| so    |  1 |  0 |  0 |  1 |  1|  1|');
gettext('Reset the shift register  \nafter 4 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Data Ledoscope. 4 samples of 8bits data are taken initially, at the system clock rate');
gettext('2-bits Syscounter');
gettext('Inc1-2bit: Increment a 2-bits number by one');
gettext('AdderK-2bit: Adder of 2-bit operand and 2-bit constant');
gettext('Adder-2bits: Adder of two operands of 2 bits');
gettext('DFF-02: Two D flip-flops in paralell');
gettext('4-to-1 Multplexer (8-bit channels)');
gettext('2-to-1 Multplexer (8-bit channels)');
gettext('2-to-1 Multplexer (4-bit channels)');
gettext('Counter-x02: 2-bits counter');
gettext('Generic component with clk input');
gettext('OR-BUS2: OR gate with 2-bits bus input');
gettext('## Sys-SLR Register: Manual testing\n\nShift the initial value first to the right and then to the left');
gettext('| Cycle | 0  | 1  | 2  | 3  | 4 |\n|-------|----|----|----|----|---|\n| Value | 11 | 01 | 00 | 01 | 11|\n| lsb   |  1 |  1 |  0 | 1  |  1|');
gettext('Shift to the left in  \ncycle 2');
gettext('The first four samples on the  \nchannels are captured  \n(Samples at cycles 0 to 3)');
gettext('Cycle number: 0-3');
gettext('Channel B');
gettext('Channel A');
gettext('01-manual-testing');
gettext('02-bits');
gettext('02-bits');
gettext('02-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SL2-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SL2-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('02-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SL2-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SL2 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('02-bits');
gettext('03-bits');
gettext('02-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('start: Start signal: It goes from 1 to 0 when the system clock starts. 1 cycle pulse witch');
gettext('System - D Flip-flop. Capture data every system clock cycle');
gettext('## Sys-SR2-ld-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value at cycle 1 and  \nreset at cycle 3');
gettext('| Cycle | 0  | 1  | 2  | 3  | 4 | 5 |\n|-------|----|----|----|----|---|---|\n| Value | 01 | 11 | 10 | 10 | 00| 00|\n| so    |  0 |  1 | 1  |  0 | 1 |  0|');
gettext('Load the shift register  \nafter 2 cycles');
gettext('Initial value: 1');
gettext('Initial value: 0');
gettext('Falling edge');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SL2-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value at cycle 1');
gettext('| Cycle | 0  | 1  | 2  | 3  | 4 | 5 |\n|-------|----|----|----|----|---|---|\n| Value | 01 | 10 | 11 | 10 |00 | 00|\n| so    |  0 | 1  | 1  | 1  |0  |  0|');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('UINT8-3bit-verilog:  Extend a 3-bit unsigned integer to 8-bits. Verilog implementation ');
gettext('Bus8-Split-5-3: Split the 8-bits bus into two buses of 5 and 3 wires');
gettext('## Sys-SR3-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value after the first  \nis shifted');
gettext('Load the shift register  \nafter 3 cycles');
gettext('01-manual-testing');
gettext('02-bits');
gettext('03-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SL2-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is reset at cycle 1');
gettext('| Cycle | 0  | 1  | 2  | 3  | 4 | 5 |\n|-------|----|----|----|----|---|---|\n| Value | 01 | 10 | 01 | 10 |00 | 00|\n| so    |  0 | 1  | 0  | 1  |0  |  0|');
gettext('Reset the shift register  \nafter 2 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SL3-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset after 3 cycles');
gettext('Sys-Shit-Right-rst');
gettext('Reset the shift register  \nafter 3 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SL Register: Manual testing\n\nThe data from the shif register (initially with the value 3) is  \ncaptured by two LEDOscopes');
gettext('Sys-Shift-Left');
gettext('| Cycle | 0  | 1  | 2  | 3  |\n|-------|----|----|----|----|\n| Value | 11 | 10 | 00 | 00 |\n| so    |  1 |  1 | 0  |  0 |');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SL Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('UINT8-4bit-verilog:  Extend a 4-bit unsigned integer to 8-bits. Verilog implementation ');
gettext('## Sys-SL4 Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('SR');
gettext('SR-ld');
gettext('SR-ld-rst');
gettext('SR-rst');
gettext('Sys');
gettext('Sys-ld');
gettext('Sys-ld-rst');
gettext('Sys-rst');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('16-bits');
gettext('32-bits');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('16-bits');
gettext('32-bits');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('16-bits');
gettext('32-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR2-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR3-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Generic: 4-bits generic constant (0-15)');
gettext('## SR4-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Generic: 5-bits generic constant (0-31)');
gettext('UINT8-5bit-verilog:  Extend a 5-bit unsigned integer to 8-bits. Verilog implementation ');
gettext('## SR5-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('UINT8-6bit-verilog:  Extend a 6-bit unsigned integer to 8-bits. Verilog implementation ');
gettext('## SR6-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Generic: 7-bits generic constant (0-127)');
gettext('UINT8-7bit-verilog:  Extend a 7-bit unsigned integer to 8-bits. Verilog implementation ');
gettext('## SR7-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('Generic: 8-bits generic constant (0-255)');
gettext('## SR8-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Generic: 9-bits generic constant');
gettext('UINT32-9bit-verilog:  Extend a 9-bit unsigned integer to 32-bits. Verilog implementation ');
gettext('## SR9-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('UINT32-10bit-verilog:  Extend a 10-bit unsigned integer to 32-bits. Verilog implementation ');
gettext('## SR10-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Generic: 11-bits generic constant');
gettext('UINT32-11bit-verilog:  Extend a 11-bit unsigned integer to 32-bits. Verilog implementation ');
gettext('## SR11-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('UINT32-12bit-verilog:  Extend a 12-bit unsigned integer to 32-bits. Verilog implementation ');
gettext('Generic: 12-bits generic constant (0-4095)');
gettext('## SR12-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR16-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('SR16-ld-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Bus32-Split-half: Split the 32-bits bus into two buses of 16 wires');
gettext('Generic: 32-bits generic constant');
gettext('## SR32-ld-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR2-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR3-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR4-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR5-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR6-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR7-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR8-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR9-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR10-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR11-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR12-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR16-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR32-ld Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('16-bits');
gettext('32-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR4-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR5-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR6-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR7-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR8-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR9-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR10-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR11-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR12-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR16-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR32-rst Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR2 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Sin título');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR3 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR4 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR5 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR6 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR7 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR8 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR9 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR10 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR11 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR12 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR16 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## SR32 Register: Manual testing\n\nUnary counter shown in the LEDs');
gettext('01-manual-testing');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('16-bits');
gettext('32-bits');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('16-bits');
gettext('32-bits');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('16-bits');
gettext('32-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('| Cycle | 0  | 1  | 2  | 3  | 4 | 5 |\n|-------|----|----|----|----|---|---|\n| Value | 10 | 11 | 01 | 10 | 01| 00|\n| so    |  0 |  1 | 1  |  0 | 1 |  0|');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Sys-SR-03-verilog: 3-bits System Shift register to the right.  Verilog implementation');
gettext('## Sys-SR3-ld-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes  \nThe shift register is loaded at cycle 1 and reset when it has been shifted');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Ledoscope. Capture the input signal during the first 16 cycles after circuit initialization');
gettext('4-bits Syscounter');
gettext('DFF-04: Three D flip-flops in paralell');
gettext('Inc1-4bit: Increment a 4-bits number by one');
gettext('AdderK-4bit: Adder of 4-bit operand and 4-bit constant');
gettext('Display16-8: Display a 16-bits value on an  8-LEDs. The sel input selects the byte to display ');
gettext('System TFF with toggle input: It toogles on every system cycle if the input is active');
gettext('4-bits counter');
gettext('Byte 0  \n(least significant)  ');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR5-ld-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes  \nThe shift register is loaded at cycle 1 and reset when it has been shifted');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR6-ld-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes  \nThe shift register is loaded at cycle 1 and reset when it has been shifted');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR7-ld-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes  \nThe shift register is loaded at cycle 1 and reset when it has been shifted');
gettext('00-Index');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR8-ld-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes  \nThe shift register is loaded at cycle 1 and reset when it has been shifted');
gettext('01-manual-testing');
gettext('Sys-SR8-ld-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Ledoscope. Capture the input signal during the first 32 cycles after circuit initialization');
gettext('Bus32-Join-quarter: Join the four buses into an 32-bits Bus');
gettext('5-bits Syscounter');
gettext('DFF-05: five D flip-flops in paralell');
gettext('Bus5-Split-1-4: Split the 5-bits bus into two buses of 1 and 4 bits');
gettext('Bus5-Join-1-4: Join the two buses of 1 and 4 bits into a 5-bits Bus');
gettext('Inc1-5bit: Increment a 5-bits number by one');
gettext('AdderK-5bit: Adder of 5-bit operand and 5-bit constant');
gettext('Adder-5bits: Adder of two operands of 5 bits');
gettext('Display32-8: Display a 32-bits value on an  8-LEDs. The sel input selects the byte to display ');
gettext('Bus32-Split-quarter: Split the 32-bits bus into four buses of 8 wires');
gettext('Data Ledoscope. 4 samples of 16bits data are taken initially, at the system clock rate');
gettext('OR-BUS2-verilog: OR gate with 2-bits bus input. Verilog implementation');
gettext('4-to-1 Multplexer (16-bit channels). Verilog implementation');
gettext('## Sys-SR10-ld-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes  \nThe shift register is loaded at cycle 1 and reset when it has been shifted');
gettext('5-bits counter');
gettext('After 16 cycles the Flip-Flop is  \nreset and it stops capturing  \nbits');
gettext('The first four samples on the  \nchannels are captured  \n(Samples at cycles 0-3)');
gettext('T flip-flop');
gettext('The Flip-flips is reset  \nat the end of cycle 1');
gettext('2-cycles with pulse');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR11-ld-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes  \nThe shift register is loaded at cycle 1 and reset when it has been shifted');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR12-ld-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes  \nThe shift register is loaded at cycle 1 and reset when it has been shifted');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR16-ld-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes  \nThe shift register is loaded at cycle 1 and reset when it has been shifted');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Data Ledoscope. 2 samples of 32bits data are taken initially, at the system clock rate');
gettext('System TFF: It toogles its output on every system cycle');
gettext('Counter-x01: 1-bit counter');
gettext('Reg-x32: 32bits register');
gettext('2-to-1 Multplexer (32-bit channels)');
gettext('## Sys-SR32-ld-rst Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes  \nThe shift register is loaded at cycle 1 and reset when it has been shifted');
gettext('The first two samples on the  \nchannels are captured  \n(Samples at cycles 0 and 1)');
gettext('Cycle number: 0 and 1');
gettext('It is 1 if the sample 0 is  \nthe current sample');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR2-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value at cycle 1');
gettext('Sys-Shit-Right-ld');
gettext('| Cycle | 0  | 1  | 2  | 3  | 4 | 5 |\n|-------|----|----|----|----|---|---|\n| Value | 10 | 01 | 11 | 01 |00 | 00|\n| so    |  0 |  1 | 1  |  1 |0  |  0|');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR4-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value after the first  \nis shifted');
gettext('Load the shift register  \nafter 5 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR5-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value after the first  \nis shifted');
gettext('Load the shift register  \nafter 6 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR6-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value after the first  \nis shifted');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR7-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value after the first  \nis shifted');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR8-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value after the first  \nis shifted');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR9-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value after the first  \nis shifted');
gettext('Load the shift register  \nafter 9 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR10-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value after the first  \nis shifted');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR11-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value after the first  \nis shifted');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR12-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value after the first  \nis shifted');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR16-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value after the first  \nis shifted');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR32-ld Register: Manual testing\n\nThe data from the shift register is captured by two LEDOscopes\nThe shift register is loaded with another value after the first  \nis shifted');
gettext('01-manual-testing');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('16-bits');
gettext('32-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR2-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset at cycle 1');
gettext('| Cycle | 0  | 1  | 2  | 3  | 4 | 5 |\n|-------|----|----|----|----|---|---|\n| Value | 10 | 01 | 10 | 01 |00 | 00|\n| so    |  0 |  1 | 0  |  1 |0  |  0|');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR3-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset after 3 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR4-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset after 4 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Bus8-Split-3-5: Split the 8-bits bus into two buses of 3 and 5 wires');
gettext('## Sys-SR5-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset after 5 cycles');
gettext('Reset the shift register  \nafter 5 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of 1 and 7 wires');
gettext('## Sys-SR6-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset after 6 cycles');
gettext('Reset the shift register  \nafter 6 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR7-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset after 7 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR8-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset after 8 cycles');
gettext('Reset the shift register  \nafter 8 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR9-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset after 9 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR10-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset after 10 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR11-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset after 11 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR12-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset after 12 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR16-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset after 16 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Sys-SR-rst-32-verilog: 32-bits System Shift register to the right, with reset.  Verilog implementation');
gettext('## Sys-SR32-rst Register: Manual testing\n\nThe data from the shif register is captured by two LEDOscopes\nThe shift register is reset after 36 cycles');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR Register: Manual testing\n\nThe data from the shif register (initially with the value 3) is  \ncaptured by two LEDOscopes');
gettext('Sys-Shit-Right');
gettext('| Cycle | 0  | 1  | 2  | 3  |\n|-------|----|----|----|----|\n| Value | 11 | 01 | 00 | 00 |\n| so    |  1 |  1 | 0  |  0 |');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR4 Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR5 Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR6 Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR7 Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR8 Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR9 Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR10 Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR11 Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR12 Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR16 Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Sys-SR32 Register: Manual testing\n\nThe data from the shif register is  \ncaptured by two LEDOscopes');
gettext('01-manual-testing');
gettext('00-Index');
